{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dart-sdk/lib/core/string_sink.dart","name":"StringSink","id":"StringSink","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`.\n","name":"write","id":"write1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"obj","id":"obj","kind":"param"}],"line":"13","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nIterates over the given [objects] and [write]s them in sequence.\n","name":"writeAll","id":"writeAll2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objects","id":"objects","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"18","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`. Then adds a new line.\n","name":"writeln","id":"writeln1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"defaultValue":"\"\"","name":"obj","id":"obj","kind":"param"}],"line":"24","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nWrites the [charCode] to `this`.\n\nThis method is equivalent to `write(new String.fromCharCode(charCode))`.\n","name":"writeCharCode","id":"writeCharCode1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"charCode","id":"charCode","kind":"param"}],"line":"31","kind":"method"}],"line":"7","kind":"class"},{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"uri":"dart-sdk/lib/async/async.dart","name":"dart:async","id":"dart.async","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamSink/S","name":"S"}],"name":"EventSink"},{"refId":"dart.async/StreamConsumer","arguments":[{"refId":"dart.async/StreamSink/S","name":"S"}],"name":"StreamConsumer"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [StreamSink] unifies the asynchronous methods from [StreamConsumer] and\nthe synchronous methods from [EventSink].\n\nThe [EventSink] methods can't be used while the [addStream] is called.\nAs soon as the [addStream]'s [Future] completes with a value, the\n[EventSink] methods can be used again.\n\nIf [addStream] is called after any of the [EventSink] methods, it'll\nbe delayed until the underlying system has consumed the data added by the\n[EventSink] methods.\n\nWhen [EventSink] methods are used, the [done] [Future] can be used to\ncatch any errors.\n\nWhen [close] is called, it will return the [done] [Future].\n","uri":"dart-sdk/lib/async/stream.dart","name":"StreamSink","id":"StreamSink","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nClose the [StreamSink]. It'll return the [done] Future.\n","name":"close","id":"close0()","line":"952","kind":"method"},{"ref":{"refId":"dart.async/Future","name":"Future"},"comment":"\nThe [done] Future completes with the same values as [close], except\nfor the following case:\n\n* The synchronous methods of [EventSink] were called, resulting in an\n  error. If there is no active future (like from an addStream call), the\n  [done] future will complete with that error\n","name":"done","id":"done","line":"962","kind":"property"},{"name":"S","id":"S","kind":"typeparam"}],"line":"948","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe target of a [Stream.pipe] call.\n\nThe [Stream.pipe] call will pass itself to this object, and then return\nthe resulting [Future]. The pipe should complete the future when it's\ndone.\n","uri":"dart-sdk/lib/async/stream.dart","name":"StreamConsumer","id":"StreamConsumer","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"addStream","id":"addStream1()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamConsumer/S","name":"S"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"926","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"close","id":"close0()","line":"927","kind":"method"},{"name":"S","id":"S","kind":"typeparam"}],"line":"925","kind":"class"},{"superclass":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"comment":"[Stream] wrapper that only exposes the [Stream] interface. ","uri":"dart-sdk/lib/async/stream.dart","name":"StreamView","id":"StreamView","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"name":"asBroadcastStream","id":"asBroadcastStream0()","line":"893","kind":"method"},{"returnType":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"StreamSubscription"},"name":"listen","id":"listen4()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onData","id":"onData","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/StreamView/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"895","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"896","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"896","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onDone","id":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"line":"897","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"cancelOnError","id":"cancelOnError","line":"898","kind":"param"}],"line":"895","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isBroadcast","id":"isBroadcast","line":"891","kind":"property"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"name":"_stream","isPrivate":true,"id":"_stream","line":"887","kind":"variable"},{"name":"StreamView","id":"StreamView1()","children":[{"initializedField":{"refId":"dart.async/StreamView/_stream","name":"_stream"},"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"name":"_stream","isPrivate":true,"id":"_stream","kind":"param"}],"line":"889","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"886","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn interface that abstracts creation or handling of [Stream] events.\n","uri":"dart-sdk/lib/async/stream.dart","name":"EventSink","id":"EventSink","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Create a data event ","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.async/EventSink/T","name":"T"},"name":"event","id":"event","kind":"param"}],"line":"877","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Create an async error. ","name":"addError","id":"addError1()","children":[{"name":"errorEvent","id":"errorEvent","kind":"param"}],"line":"879","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Request a stream to close. ","name":"close","id":"close0()","line":"881","kind":"method"},{"name":"T","id":"T","kind":"typeparam"}],"line":"875","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA source of asynchronous data events.\n\nA Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.\n\nYou can [listen] on a stream to receive the events it sends. When you listen,\nyou receive a [StreamSubscription] object that can be used to stop listening,\nor to temporarily pause events from the stream.\n\nWhen an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.\n\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.\n\nStreams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.\n\nThere are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.\n\nA single-subscription stream allows only a single listener at a time.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.\n\nSingle-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.\n\nA broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\n\nBroadcast streams are used for independent events/observers.\n\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return [:true:].\n","uri":"dart-sdk/lib/async/stream.dart","name":"Stream","id":"Stream","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nReturns a multi-subscription stream that produces the same events as this.\n\nIf this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and unsubscribe again when the last subscription is\ncancelled.\n\nIf this stream is already a broadcast stream, it is returned unmodified.\n","name":"asBroadcastStream","id":"asBroadcastStream0()","line":"159","kind":"method"},{"returnType":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamSubscription"},"comment":"\nAdds a subscription to this stream.\n\nOn each data event from this stream, the subscriber's [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\nobject describing the error.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [cancelOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","name":"listen","id":"listen4()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onData","id":"onData","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"event","id":"event","line":"178","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"179","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"179","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onDone","id":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"line":"180","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"cancelOnError","id":"cancelOnError","line":"181","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n","name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"event","id":"event","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"\nCreates a new stream that converts each element of this stream\nto a new value using the [convert] function.\n","name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"convert","id":"convert","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"event","id":"event","line":"197","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"197","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nCreates a wrapper Stream that intercepts some errors from this stream.\n\nIf this stream sends an error that matches [test], then it is intercepted\nby the [handle] function.\n\nAn [AsyncError] [:e:] is matched by a test function if [:test(e):] returns\ntrue. If [test] is omitted, every error is considered matching.\n\nIf the error is intercepted, the [handle] function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.\n\nIf you need to transform an error into a data event, use the more generic\n[Stream.transformEvent] to handle the event by writing a data event to\nthe output sink\n","name":"handleError","id":"handleError2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"handle","id":"handle","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"218","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"218","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"218","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"\nCreates a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n","name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"convert","id":"convert","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"230","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"230","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nBinds this stream as the input of the provided [StreamConsumer].\n","name":"pipe","id":"pipe1()","children":[{"ref":{"refId":"dart.async/StreamConsumer","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamConsumer"},"name":"streamConsumer","id":"streamConsumer","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"\nChains this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","name":"transform","id":"transform1()","children":[{"ref":{"refId":"dart.async/StreamTransformer","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamTransformer"},"name":"streamTransformer","id":"streamTransformer","kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReduces a sequence of values by repeatedly applying [combine].\n","name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"previous","id":"previous","line":"253","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"253","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"253","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Reduces a sequence of values by repeatedly applying [combine]. ","name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"previous","id":"previous","line":"285","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"285","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"285","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"\nChecks whether [match] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"name":"match","id":"match","kind":"param"}],"line":"315","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nExecutes [action] on each data event of the stream.\n\nCompletes the returned [Future] when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if [action] throws.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"348","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"348","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"\nChecks whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"375","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"375","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"\nChecks whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"407","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"407","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"List"}],"name":"Future"},"comment":"Collects the data of this stream in a [List]. ","name":"toList","id":"toList0()","line":"466","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/Set","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Set"}],"name":"Future"},"comment":"Collects the data of this stream in a [Set]. ","name":"toSet","id":"toSet0()","line":"484","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nProvides at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n","name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"510","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"522","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"522","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nSkips the first [count] data events from this stream.\n","name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"529","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns true for the\nevent data, the returned stream will have the same events as this stream.\n","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"541","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"541","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nSkips data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n","name":"distinct","id":"distinct1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"equals","id":"equals","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"previous","id":"previous","line":"554","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"next","id":"next","line":"554","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"554","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nFinds the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"662","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"defaultValue","id":"defaultValue","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"662","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstWhere], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"699","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"defaultValue","id":"defaultValue","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"699","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"741","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"741","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the value of the [index]th data event of this stream.\n\nIf an error event occurs, the future will end with this error.\n\nIf this stream provides fewer than [index] elements before closing,\nan error is reported.\n","name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"787","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReports whether this stream is a broadcast stream.\n","name":"isBroadcast","id":"isBroadcast","line":"147","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"comment":"Counts the elements in the stream. ","name":"length","id":"length","line":"435","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"Reports whether this stream contains any elements. ","name":"isEmpty","id":"isEmpty","line":"449","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","id":"first","line":"564","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","name":"last","id":"last","line":"588","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the single element.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","name":"single","id":"single","line":"617","kind":"property"},{"name":"Stream","id":"Stream0()","line":"56","kind":"constructor"},{"comment":"\nCreates a new single-subscription stream from the future.\n\nWhen the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.\n","name":"Stream.fromFuture","id":"Stream.fromFuture1()","children":[{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"name":"future","id":"future","kind":"param"}],"line":"64","kind":"constructor"},{"comment":"\nCreates a single-subscription stream that gets its data from [data].\n","name":"Stream.fromIterable","id":"Stream.fromIterable1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Iterable"},"name":"data","id":"data","kind":"param"}],"line":"80","kind":"constructor"},{"comment":"\nCreates a stream that repeatedly emits events at [period] intervals.\n\nThe event values are computed by invoking [computation]. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.\n\nIf [computation] is omitted the event values will all be `null`.\n","name":"Stream.periodic","id":"Stream.periodic2()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"period","id":"period","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"computation","id":"computation","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"dart-sdk/lib/async/stream.dart","name":"computationCount","id":"computationCount","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"95","kind":"param"}],"line":"94","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"55","kind":"class"}],"line":"5","kind":"library"},{"comment":"\nThe IO library is used for Dart server applications,\nwhich run on a stand-alone Dart VM from the command line.\n*This library does not work in browser based applications.*\n\nThis library allows you to work with files, directories,\nsockets, processes, HTTP servers and clients, and more.\n","uri":"dart-sdk/lib/io/io.dart","name":"dart:io","id":"dart.io","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.core/StringSink","name":"StringSink"},{"refId":"dart.async/StreamSink","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"StreamSink"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nHelper class to wrap a [StreamConsumer<List<int>>] and provide\nutility functions for writing to the StreamConsumer directly. The\n[IOSink] buffers the input given by all [StringSink] methods and will delay\na [addStream] until the buffer is flushed.\n\nWhen the [IOSink] is bound to a stream (through [addStream]) any call\nto the [IOSink] will throw a [StateError]. When the [addStream] compeltes,\nthe [IOSink] will again be open for all calls.\n","uri":"dart-sdk/lib/io/io_sink.dart","name":"IOSink","id":"IOSink","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nWrites the bytes uninterpreted to the consumer.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"31","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nWrites an error to the consumer.\n","name":"addError","id":"addError1()","children":[{"name":"error","id":"error","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nAdds all elements of the given [stream] to `this`.\n","name":"addStream","id":"addStream1()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nClose the target.\n","name":"close","id":"close0()","line":"46","kind":"method"},{"ref":{"refId":"dart.async/Future","name":"Future"},"comment":"\nGet a future that will complete when all synchronous have completed, or an\nerror happened. This future is identical to the future returned from close.\n","name":"done","id":"done","line":"52","kind":"property"},{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"comment":"\nThe [Encoding] used when writing strings. Depending on the\nunderlying consumer this property might be mutable.\n","name":"encoding","id":"encoding","line":"26","kind":"variable"},{"name":"IOSink","id":"IOSink2()","children":[{"ref":{"refId":"dart.async/StreamConsumer","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"StreamConsumer"},"name":"target","id":"target","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"isOptional":true,"defaultValue":"Encoding.UTF_8","name":"encoding","id":"encoding","line":"19","kind":"param"}],"line":"18","kind":"constructor"}],"line":"17","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.io/IOSink","name":"IOSink"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nHTTP response to be send back to the client.\n\nThis object has a number of properties for setting up the HTTP\nheader of the response. When the header has been set up the methods\nfrom the [IOSink] can be used to write the actual body of the HTTP\nresponse. When one of the [IOSink] methods is used for the\nfirst time the request header is send. Calling any methods that\nwill change the header after it is sent will throw an exception.\n\nWhen writing string data through the [IOSink] the encoding used\nwill be determined from the \"charset\" parameter of the\n\"Content-Type\" header.\n\n    HttpResponse response = ...\n    response.headers.contentType\n        = new ContentType(\"application\", \"json\", charset: \"utf-8\");\n    response.write(...);  // Strings written will be UTF-8 encoded.\n\nIf no charset is provided the default of ISO-8859-1 (Latin 1) will\nbe used.\n\n    HttpResponse response = ...\n    response.headers.add(HttpHeaders.CONTENT_TYPE, \"text/plain\");\n    response.write(...);  // Strings written will be ISO-8859-1 encoded.\n\nIf an unsupported encoding is used an exception will be thrown if\nusing one of the write methods taking a string.\n","uri":"dart-sdk/lib/io/http.dart","name":"HttpResponse","id":"HttpResponse","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/Socket","name":"Socket"}],"name":"Future"},"comment":"\nDetaches the underlying socket from the HTTP server. When the\nsocket is detached the HTTP server will no longer perform any\noperations on it.\n\nThis is normally used when a HTTP upgrade request is received\nand the communication should continue with a different protocol.\n","name":"detachSocket","id":"detachSocket0()","line":"776","kind":"method"},{"ref":{"refId":"dart.io/HttpHeaders","name":"HttpHeaders"},"comment":"\nReturns the response headers.\n","name":"headers","id":"headers","line":"761","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.io/Cookie","name":"Cookie"}],"name":"List"},"comment":"\nCookies to set in the client (in the 'set-cookie' header).\n","name":"cookies","id":"cookies","line":"766","kind":"property"},{"ref":{"refId":"dart.io/HttpConnectionInfo","name":"HttpConnectionInfo"},"comment":"\nGets information about the client connection. Returns [null] if the socket\nis not available.\n","name":"connectionInfo","id":"connectionInfo","line":"782","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGets and sets the content length of the response. If the size of\nthe response is not known in advance set the content length to\n-1 - which is also the default if not set.\n","name":"contentLength","id":"contentLength","line":"735","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGets and sets the status code. Any integer value is accepted. For\nthe official HTTP status codes use the fields from\n[HttpStatus]. If no status code is explicitly set the default\nvalue [HttpStatus.OK] is used.\n","name":"statusCode","id":"statusCode","line":"743","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nGets and sets the reason phrase. If no reason phrase is explicitly\nset a default reason phrase is provided.\n","name":"reasonPhrase","id":"reasonPhrase","line":"749","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nGets and sets the persistent connection state. The initial value\nof this property is the persistent connection state from the\nrequest.\n","name":"persistentConnection","id":"persistentConnection","line":"756","kind":"variable"}],"line":"728","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nHttp request delivered to the HTTP server callback. The [HttpRequest] is a\n[Stream] of the body content of the request. Listen to the body to handle the\ndata and be notified once the entire body is received.\n","uri":"dart-sdk/lib/io/http.dart","name":"HttpRequest","id":"HttpRequest","children":[{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the content length of the request body. If the size of\nthe request body is not known in advance this -1.\n","name":"contentLength","id":"contentLength","line":"631","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the method for the request.\n","name":"method","id":"method","line":"636","kind":"property"},{"ref":{"refId":"dart.uri/Uri","name":"Uri"},"comment":"\nReturns the URI for the request.\n","name":"uri","id":"uri","line":"641","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"comment":"\nReturns the parsed query string.\n","name":"queryParameters","id":"queryParameters","line":"646","kind":"property"},{"ref":{"refId":"dart.io/HttpHeaders","name":"HttpHeaders"},"comment":"\nReturns the request headers.\n","name":"headers","id":"headers","line":"651","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.io/Cookie","name":"Cookie"}],"name":"List"},"comment":"\nReturns the cookies in the request (from the Cookie headers).\n","name":"cookies","id":"cookies","line":"656","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns the persistent connection state signaled by the client.\n","name":"persistentConnection","id":"persistentConnection","line":"661","kind":"property"},{"ref":{"refId":"dart.io/X509Certificate","name":"X509Certificate"},"comment":"\nReturns the client certificate of the client making the request.\nReturns null if the connection is not a secure TLS or SSL connection,\nor if the server does not request a client certificate, or if the client\ndoes not provide one.\n","name":"certificate","id":"certificate","line":"669","kind":"property"},{"ref":{"refId":"dart.io/HttpSession","name":"HttpSession"},"comment":"\nGets the session for the given request. If the session is\nbeing initialized by this call, [:isNew:] will be true for the returned\nsession.\nSee [HttpServer.sessionTimeout] on how to change default timeout.\n","name":"session","id":"session","line":"677","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the HTTP protocol version used in the request. This will\nbe \"1.0\" or \"1.1\".\n","name":"protocolVersion","id":"protocolVersion","line":"683","kind":"property"},{"ref":{"refId":"dart.io/HttpConnectionInfo","name":"HttpConnectionInfo"},"comment":"\nGets information about the client connection. Returns [null] if the socket\nis not available.\n","name":"connectionInfo","id":"connectionInfo","line":"689","kind":"property"},{"ref":{"refId":"dart.io/HttpResponse","name":"HttpResponse"},"comment":"\nGets the [HttpResponse] object, used for sending back the response to the\nclient.\n","name":"response","id":"response","line":"695","kind":"property"}],"line":"626","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.async/Stream","arguments":[{"refId":"dart.io/HttpRequest","name":"HttpRequest"}],"name":"Stream"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nHTTP server.\n","uri":"dart-sdk/lib/io/http.dart","name":"HttpServer","id":"HttpServer","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/HttpServer","name":"HttpServer"}],"name":"Future"},"isStatic":true,"comment":"\nStarts listening for HTTP requests on the specified [address] and\n[port].\n\nThe default value for [address] is 127.0.0.1, which will allow\nonly incoming connections from the local host. To allow for\nincoming connection from the network use either the value 0.0.0.0\nto bind to all interfaces or the IP address of a specific\ninterface.\n\nIf [port] has the value [:0:] (the default) an ephemeral port\nwill be chosen by the system. The actual port used can be\nretrieved using the [:port:] getter.\n\nThe optional argument [backlog] can be used to specify the listen\nbacklog for the underlying OS listen setup. If [backlog] has the\nvalue of [:0:] (the default) a reasonable value will be chosen by\nthe system.\n","name":"bind","id":"bind3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"127.0.0.1\"","name":"address","id":"address","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"port","id":"port","line":"83","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"backlog","id":"backlog","line":"84","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/HttpServer","name":"HttpServer"}],"name":"Future"},"isStatic":true,"comment":"\nStarts listening for HTTPS requests on the specified [address] and\n[port]. If a [port] of 0 is specified the server will choose an\nephemeral port. The optional argument [backlog] can be used to\nspecify the listen backlog for the underlying OS listen\nsetup.\n\nThe certificate with Distinguished Name [certificateName] is looked\nup in the certificate database, and is used as the server certificate.\nif [requestClientCertificate] is true, the server will request clients\nto authenticate with a client certificate.\n","name":"bindSecure","id":"bindSecure5()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"address","id":"address","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"port","id":"port","line":"101","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"backlog","id":"backlog","line":"102","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"certificateName","id":"certificateName","line":"103","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"requestClientCertificate","id":"requestClientCertificate","line":"104","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nPermanently stops this [HttpServer] from listening for new connections.\nThis closes this [Stream] of [HttpRequest]s with a done event.\n","name":"close","id":"close0()","line":"123","kind":"method"},{"isSetter":true,"comment":"\nSets the timeout, in seconds, for sessions of this [HttpServer].\nThe default timeout is 20 minutes.\n","name":"sessionTimeout=","id":"sessionTimeout=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"timeout","id":"timeout","kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.io/HttpConnectionsInfo","name":"HttpConnectionsInfo"},"comment":"\nReturns an [HttpConnectionsInfo] object summarizing the number of\ncurrent connections handled by the server.\n","name":"connectionsInfo","id":"connectionsInfo0()","line":"142","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the port that the server is listening on. This can be\nused to get the actual port used when a value of 0 for [:port:] is\nspecified in the [bind] or [bindSecure] call.\n","name":"port","id":"port","line":"130","kind":"property"},{"comment":"\nAttaches the HTTP server to an existing [ServerSocket]. When the\n[HttpServer] is closed, the [HttpServer] will just detach itself,\nclosing current connections but not closing [serverSocket].\n","name":"HttpServer.listenOn","id":"HttpServer.listenOn1()","children":[{"ref":{"refId":"dart.io/ServerSocket","name":"ServerSocket"},"name":"serverSocket","id":"serverSocket","kind":"param"}],"line":"116","kind":"constructor"}],"line":"60","kind":"class"}],"line":"13","kind":"library"}],"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/safe_http_server.dart","id":"safe_http_server","children":[{"interfaces":[{"refId":"dart.io/HttpResponse","name":"HttpResponse"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A wrapper around [HttpResponse] for the sole purpose of swallowing errors on\n[done].","name":"_HttpResponseWrapper","isPrivate":true,"id":"_HttpResponseWrapper","children":[{"isSetter":true,"name":"contentLength=","id":"contentLength=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"105","kind":"method"},{"isSetter":true,"name":"statusCode=","id":"statusCode=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"110","kind":"method"},{"isSetter":true,"name":"reasonPhrase=","id":"reasonPhrase=1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"value","id":"value","kind":"param"}],"line":"115","kind":"method"},{"isSetter":true,"name":"persistentConnection=","id":"persistentConnection=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"120","kind":"method"},{"isSetter":true,"name":"encoding=","id":"encoding=1()","children":[{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"name":"value","id":"value","kind":"param"}],"line":"125","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/Socket","name":"Socket"}],"name":"Future"},"name":"detachSocket","id":"detachSocket0()","line":"131","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/HttpResponse","name":"HttpResponse"}],"name":"Future"},"name":"addStream","id":"addStream1()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"134","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"close","id":"close0()","line":"136","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"write","id":"write1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"obj","id":"obj","kind":"param"}],"line":"137","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"writeAll","id":"writeAll2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objects","id":"objects","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"138","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"writeCharCode","id":"writeCharCode1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"charCode","id":"charCode","kind":"param"}],"line":"139","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"writeln","id":"writeln1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"defaultValue":"\"\"","name":"obj","id":"obj","kind":"param"}],"line":"140","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addError","id":"addError1()","children":[{"name":"error","id":"error","kind":"param"}],"line":"141","kind":"method"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/HttpResponse","name":"HttpResponse"}],"name":"Future"},"comment":"Swallows all errors from writing to the response.","name":"done","id":"done","line":"99","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"contentLength","id":"contentLength","line":"104","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"statusCode","id":"statusCode","line":"109","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"reasonPhrase","id":"reasonPhrase","line":"114","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"persistentConnection","id":"persistentConnection","line":"119","kind":"property"},{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"name":"encoding","id":"encoding","line":"124","kind":"property"},{"ref":{"refId":"dart.io/HttpHeaders","name":"HttpHeaders"},"name":"headers","id":"headers","line":"129","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.io/Cookie","name":"Cookie"}],"name":"List"},"name":"cookies","id":"cookies","line":"130","kind":"property"},{"ref":{"refId":"dart.io/HttpConnectionInfo","name":"HttpConnectionInfo"},"name":"connectionInfo","id":"connectionInfo","line":"132","kind":"property"},{"ref":{"refId":"dart.io/HttpResponse","name":"HttpResponse"},"isFinal":true,"name":"_inner","isPrivate":true,"id":"_inner","line":"93","kind":"variable"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.io/HttpResponse","name":"HttpResponse"}],"name":"Future"},"name":"_done","isPrivate":true,"id":"_done","line":"94","kind":"variable"},{"name":"_HttpResponseWrapper","id":"_HttpResponseWrapper1()","children":[{"initializedField":{"refId":"safe_http_server/_HttpResponseWrapper/_inner","name":"_inner"},"ref":{"refId":"dart.io/HttpResponse","name":"HttpResponse"},"name":"_inner","isPrivate":true,"id":"_inner","kind":"param"}],"line":"96","kind":"constructor"}],"line":"92","kind":"class"},{"interfaces":[{"refId":"dart.io/HttpRequest","name":"HttpRequest"}],"superclass":{"refId":"dart.async/StreamView","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"StreamView"},"comment":"A wrapper around [HttpRequest] for the sole purpose of swallowing errors on\n[HttpResponse.done].","name":"_HttpRequestWrapper","isPrivate":true,"id":"_HttpRequestWrapper","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"contentLength","id":"contentLength","line":"77","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"method","id":"method","line":"78","kind":"property"},{"ref":{"refId":"dart.uri/Uri","name":"Uri"},"name":"uri","id":"uri","line":"79","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"queryParameters","id":"queryParameters","line":"80","kind":"property"},{"ref":{"refId":"dart.io/HttpHeaders","name":"HttpHeaders"},"name":"headers","id":"headers","line":"81","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.io/Cookie","name":"Cookie"}],"name":"List"},"name":"cookies","id":"cookies","line":"82","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"persistentConnection","id":"persistentConnection","line":"83","kind":"property"},{"ref":{"refId":"dart.io/X509Certificate","name":"X509Certificate"},"name":"certificate","id":"certificate","line":"84","kind":"property"},{"ref":{"refId":"dart.io/HttpSession","name":"HttpSession"},"name":"session","id":"session","line":"85","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"protocolVersion","id":"protocolVersion","line":"86","kind":"property"},{"ref":{"refId":"dart.io/HttpConnectionInfo","name":"HttpConnectionInfo"},"name":"connectionInfo","id":"connectionInfo","line":"87","kind":"property"},{"ref":{"refId":"dart.io/HttpRequest","name":"HttpRequest"},"isFinal":true,"name":"_inner","isPrivate":true,"id":"_inner","line":"69","kind":"variable"},{"ref":{"refId":"dart.io/HttpResponse","name":"HttpResponse"},"isFinal":true,"name":"response","id":"response","line":"70","kind":"variable"},{"name":"_HttpRequestWrapper","id":"_HttpRequestWrapper1()","children":[{"ref":{"refId":"dart.io/HttpRequest","name":"HttpRequest"},"name":"inner","id":"inner","kind":"param"}],"line":"72","kind":"constructor"}],"line":"68","kind":"class"},{"interfaces":[{"refId":"dart.io/HttpServer","name":"HttpServer"}],"superclass":{"refId":"dart.async/StreamView","arguments":[{"refId":"dart.io/HttpRequest","name":"HttpRequest"}],"name":"StreamView"},"comment":"A wrapper around [HttpServer] that swallows errors caused by requests\nbehaving badly. This provides the following guarantees:\n\n* The [SafeHttpServer.listen] onError callback will only emit server-wide\n  errors. It will not emit errors for requests that were unparseable or\n  where the connection was closed too soon.\n* [HttpResponse.done] will emit no errors.\n\nThe [HttpRequest] data stream can still emit errors.","name":"SafeHttpServer","id":"SafeHttpServer","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"safe_http_server/SafeHttpServer","name":"SafeHttpServer"}],"name":"Future"},"isStatic":true,"name":"bind","id":"bind3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"127.0.0.1\"","name":"host","id":"host","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"port","id":"port","line":"25","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"backlog","id":"backlog","line":"25","kind":"param"}],"line":"24","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"close","id":"close0()","line":"34","kind":"method"},{"isSetter":true,"name":"sessionTimeout=","id":"sessionTimeout=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"timeout","id":"timeout","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.io/HttpConnectionsInfo","name":"HttpConnectionsInfo"},"name":"connectionsInfo","id":"connectionsInfo0()","line":"42","kind":"method"},{"returnType":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.io/HttpRequest","name":"HttpRequest"}],"name":"StreamSubscription"},"name":"listen","id":"listen4()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onData","id":"onData","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.io/HttpRequest","name":"HttpRequest"},"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/safe_http_server.dart","name":"value","id":"value","line":"44","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/safe_http_server.dart","name":"error","id":"error","line":"45","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"45","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onDone","id":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"line":"45","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"cancelOnError","id":"cancelOnError","line":"46","kind":"param"}],"line":"44","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"port","id":"port","line":"36","kind":"property"},{"ref":{"refId":"dart.io/HttpServer","name":"HttpServer"},"isFinal":true,"name":"_inner","isPrivate":true,"id":"_inner","line":"22","kind":"variable"},{"name":"SafeHttpServer","id":"SafeHttpServer1()","children":[{"ref":{"refId":"dart.io/HttpServer","name":"HttpServer"},"name":"server","id":"server","kind":"param"}],"line":"30","kind":"constructor"}],"line":"21","kind":"class"}],"line":"5","kind":"library"}