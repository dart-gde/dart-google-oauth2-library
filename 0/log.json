{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"Message logging.","uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/log.dart","id":"log","children":[{"returnType":{"refId":"void","name":"void"},"name":"_logToStream","isPrivate":true,"id":"_logToStream3()","children":[{"ref":{"refId":"dart.io/IOSink","name":"IOSink"},"name":"sink","id":"sink","kind":"param"},{"ref":{"refId":"log/Entry","name":"Entry"},"name":"entry","id":"entry","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"showLabel","id":"showLabel","kind":"param"}],"line":"243","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log function that prints the message to stderr with the level name.","name":"_logToStderrWithLabel","isPrivate":true,"id":"_logToStderrWithLabel1()","children":[{"ref":{"refId":"log/Entry","name":"Entry"},"name":"entry","id":"entry","kind":"param"}],"line":"239","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log function that prints the message to stderr.","name":"_logToStderr","isPrivate":true,"id":"_logToStderr1()","children":[{"ref":{"refId":"log/Entry","name":"Entry"},"name":"entry","id":"entry","kind":"param"}],"line":"234","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log function that prints the message to stdout with the level name.","name":"_logToStdoutWithLabel","isPrivate":true,"id":"_logToStdoutWithLabel1()","children":[{"ref":{"refId":"log/Entry","name":"Entry"},"name":"entry","id":"entry","kind":"param"}],"line":"229","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Log function that prints the message to stdout.","name":"_logToStdout","isPrivate":true,"id":"_logToStdout1()","children":[{"ref":{"refId":"log/Entry","name":"Entry"},"name":"entry","id":"entry","kind":"param"}],"line":"224","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the verbosity to \"all\", which logs ALL the things.","name":"showAll","id":"showAll0()","line":"214","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the verbosity to \"solver\", which shows errors, warnings, messages, and\nsolver logs.","name":"showSolver","id":"showSolver0()","line":"204","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the verbosity to \"io\", which shows errors, warnings, messages, and IO\nevent logs.","name":"showIO","id":"showIO0()","line":"193","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the verbosity to \"normal\", which shows errors, warnings, and messages.","name":"showNormal","id":"showNormal0()","line":"182","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"If [recordTranscript()] was called, then prints the previously recorded log\ntranscript to stderr.","name":"dumpTranscript","id":"dumpTranscript0()","line":"171","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Enables recording of log entries.","name":"recordTranscript","id":"recordTranscript0()","line":"165","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs the results of running [executable].","name":"processResult","id":"processResult2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"executable","id":"executable","kind":"param"},{"ref":{"refId":"io/PubProcessResult","name":"PubProcessResult"},"name":"result","id":"result","kind":"param"}],"line":"135","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs the spawning of an [executable] process with [arguments] at [IO]\nlevel.","name":"process","id":"process2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"executable","id":"executable","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"arguments","id":"arguments","kind":"param"}],"line":"130","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Logs an asynchronous IO operation. Logs [startMessage] before the operation\nstarts, then when [operation] completes, invokes [endMessage] with the\ncompletion value and logs the result of that. Returns a future that\ncompletes after the logging is done.\n\nIf [endMessage] is omitted, then logs \"Begin [startMessage]\" before the\noperation and \"End [startMessage]\" after it.","name":"ioAsync","id":"ioAsync3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"startMessage","id":"startMessage","kind":"param"},{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"operation","id":"operation","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"endMessage","id":"endMessage","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/log.dart","name":"value","id":"value","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [level].","name":"write","id":"write2()","children":[{"ref":{"refId":"log/Level","name":"Level"},"name":"level","id":"level","kind":"param"},{"name":"message","id":"message","kind":"param"}],"line":"91","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [Level.FINE].","name":"fine","id":"fine1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"88","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [Level.SOLVER].","name":"solver","id":"solver1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"85","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [Level.IO].","name":"io","id":"io1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [Level.MESSAGE].","name":"message","id":"message1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [Level.WARNING].","name":"warning","id":"warning1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"76","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Logs [message] at [Level.ERROR].","name":"error","id":"error2()","children":[{"name":"message","id":"message","kind":"param"},{"isOptional":true,"name":"error","id":"error","kind":"param"}],"line":"64","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"log/Entry","name":"Entry"}],"name":"List"},"comment":"The list of recorded log messages. Will only be recorded if\n[recordTranscript()] is called.","name":"_transcript","isPrivate":true,"id":"_transcript","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"log/Level","name":"Level"},{"refId":"log/LogFn","name":"LogFn"}],"name":"Map"},"isFinal":true,"name":"_loggers","isPrivate":true,"id":"_loggers","line":"15","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A single log entry.","name":"Entry","id":"Entry","children":[{"ref":{"refId":"log/Level","name":"Level"},"isFinal":true,"name":"level","id":"level","line":"57","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"name":"lines","id":"lines","line":"58","kind":"variable"},{"name":"Entry","id":"Entry2()","children":[{"initializedField":{"refId":"log/Entry/level","name":"level"},"ref":{"refId":"log/Level","name":"Level"},"name":"level","id":"level","kind":"param"},{"initializedField":{"refId":"log/Entry/lines","name":"lines"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"lines","id":"lines","kind":"param"}],"line":"60","kind":"constructor"}],"line":"56","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An enum type for defining the different logging levels. By default, [ERROR]\nand [WARNING] messages are printed to sterr. [MESSAGE] messages are printed\nto stdout, and others are ignored.","name":"Level","id":"Level","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"51","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"52","kind":"property"},{"isStatic":true,"comment":"An error occurred and an operation could not be completed. Usually shown\nto the user on stderr.","name":"ERROR","id":"ERROR","line":"27","kind":"variable"},{"isStatic":true,"comment":"Something unexpected happened, but the program was able to continue,\nthough possibly in a degraded fashion.","name":"WARNING","id":"WARNING","line":"31","kind":"variable"},{"isStatic":true,"comment":"A message intended specifically to be shown to the user.","name":"MESSAGE","id":"MESSAGE","line":"34","kind":"variable"},{"isStatic":true,"comment":"Some interaction with the external world occurred, such as a network\noperation, process spawning, or file IO.","name":"IO","id":"IO","line":"38","kind":"variable"},{"isStatic":true,"comment":"Incremental output during pub's version constraint solver.","name":"SOLVER","id":"SOLVER","line":"41","kind":"variable"},{"isStatic":true,"comment":"Fine-grained and verbose additional information. Can be used to provide\nprogram state context for other logs (such as what pub was doing when an\nIO operation occurred) or just more detail for an operation.","name":"FINE","id":"FINE","line":"46","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"49","kind":"variable"},{"name":"Level._","isPrivate":true,"id":"Level._1()","children":[{"initializedField":{"refId":"log/Level/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"48","kind":"constructor"}],"line":"24","kind":"class"},{"name":"LogFn","id":"LogFn","children":[{"ref":{"refId":"log/Entry","name":"Entry"},"name":"entry","id":"entry","kind":"param"}],"line":"14","kind":"typedef"}],"line":"6","kind":"library"}