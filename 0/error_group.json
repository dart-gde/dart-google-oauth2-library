{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"uri":"dart-sdk/lib/async/async.dart","name":"dart:async","id":"dart.async","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA source of asynchronous data events.\n\nA Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.\n\nYou can [listen] on a stream to receive the events it sends. When you listen,\nyou receive a [StreamSubscription] object that can be used to stop listening,\nor to temporarily pause events from the stream.\n\nWhen an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.\n\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.\n\nStreams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.\n\nThere are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.\n\nA single-subscription stream allows only a single listener at a time.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.\n\nSingle-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.\n\nA broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\n\nBroadcast streams are used for independent events/observers.\n\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return [:true:].\n","uri":"dart-sdk/lib/async/stream.dart","name":"Stream","id":"Stream","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nReturns a multi-subscription stream that produces the same events as this.\n\nIf this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and unsubscribe again when the last subscription is\ncancelled.\n\nIf this stream is already a broadcast stream, it is returned unmodified.\n","name":"asBroadcastStream","id":"asBroadcastStream0()","line":"159","kind":"method"},{"returnType":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamSubscription"},"comment":"\nAdds a subscription to this stream.\n\nOn each data event from this stream, the subscriber's [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\nobject describing the error.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [cancelOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","name":"listen","id":"listen4()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onData","id":"onData","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"event","id":"event","line":"178","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"179","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"179","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onDone","id":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"line":"180","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"cancelOnError","id":"cancelOnError","line":"181","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n","name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"event","id":"event","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"\nCreates a new stream that converts each element of this stream\nto a new value using the [convert] function.\n","name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"convert","id":"convert","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"event","id":"event","line":"197","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"197","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nCreates a wrapper Stream that intercepts some errors from this stream.\n\nIf this stream sends an error that matches [test], then it is intercepted\nby the [handle] function.\n\nAn [AsyncError] [:e:] is matched by a test function if [:test(e):] returns\ntrue. If [test] is omitted, every error is considered matching.\n\nIf the error is intercepted, the [handle] function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.\n\nIf you need to transform an error into a data event, use the more generic\n[Stream.transformEvent] to handle the event by writing a data event to\nthe output sink\n","name":"handleError","id":"handleError2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"handle","id":"handle","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"218","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"218","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"218","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"\nCreates a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n","name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"convert","id":"convert","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"230","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"230","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nBinds this stream as the input of the provided [StreamConsumer].\n","name":"pipe","id":"pipe1()","children":[{"ref":{"refId":"dart.async/StreamConsumer","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamConsumer"},"name":"streamConsumer","id":"streamConsumer","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"\nChains this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","name":"transform","id":"transform1()","children":[{"ref":{"refId":"dart.async/StreamTransformer","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamTransformer"},"name":"streamTransformer","id":"streamTransformer","kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReduces a sequence of values by repeatedly applying [combine].\n","name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"previous","id":"previous","line":"253","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"253","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"253","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Reduces a sequence of values by repeatedly applying [combine]. ","name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"previous","id":"previous","line":"285","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"285","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"285","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"\nChecks whether [match] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"name":"match","id":"match","kind":"param"}],"line":"315","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nExecutes [action] on each data event of the stream.\n\nCompletes the returned [Future] when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if [action] throws.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"348","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"348","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"\nChecks whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"375","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"375","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"\nChecks whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"element","id":"element","line":"407","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"407","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"List"}],"name":"Future"},"comment":"Collects the data of this stream in a [List]. ","name":"toList","id":"toList0()","line":"466","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/Set","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Set"}],"name":"Future"},"comment":"Collects the data of this stream in a [Set]. ","name":"toSet","id":"toSet0()","line":"484","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nProvides at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n","name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"510","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"522","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"522","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nSkips the first [count] data events from this stream.\n","name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"529","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns true for the\nevent data, the returned stream will have the same events as this stream.\n","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"541","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"541","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"comment":"\nSkips data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n","name":"distinct","id":"distinct1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"equals","id":"equals","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"previous","id":"previous","line":"554","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"next","id":"next","line":"554","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"554","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nFinds the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"662","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"defaultValue","id":"defaultValue","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"662","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstWhere], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"699","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"defaultValue","id":"defaultValue","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"699","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/async/stream.dart","name":"value","id":"value","line":"741","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"741","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the value of the [index]th data event of this stream.\n\nIf an error event occurs, the future will end with this error.\n\nIf this stream provides fewer than [index] elements before closing,\nan error is reported.\n","name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"787","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReports whether this stream is a broadcast stream.\n","name":"isBroadcast","id":"isBroadcast","line":"147","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"comment":"Counts the elements in the stream. ","name":"length","id":"length","line":"435","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"Reports whether this stream contains any elements. ","name":"isEmpty","id":"isEmpty","line":"449","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","id":"first","line":"564","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","name":"last","id":"last","line":"588","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"comment":"\nReturns the single element.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","name":"single","id":"single","line":"617","kind":"property"},{"name":"Stream","id":"Stream0()","line":"56","kind":"constructor"},{"comment":"\nCreates a new single-subscription stream from the future.\n\nWhen the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.\n","name":"Stream.fromFuture","id":"Stream.fromFuture1()","children":[{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"name":"future","id":"future","kind":"param"}],"line":"64","kind":"constructor"},{"comment":"\nCreates a single-subscription stream that gets its data from [data].\n","name":"Stream.fromIterable","id":"Stream.fromIterable1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Iterable"},"name":"data","id":"data","kind":"param"}],"line":"80","kind":"constructor"},{"comment":"\nCreates a stream that repeatedly emits events at [period] intervals.\n\nThe event values are computed by invoking [computation]. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.\n\nIf [computation] is omitted the event values will all be `null`.\n","name":"Stream.periodic","id":"Stream.periodic2()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"period","id":"period","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"computation","id":"computation","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"dart-sdk/lib/async/stream.dart","name":"computationCount","id":"computationCount","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"95","kind":"param"}],"line":"94","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"55","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [Future] represents a delayed computation. It is used to obtain a not-yet\navailable value, or error, sometime in the future.  Receivers of a\n[Future] can register callbacks that handle the value or error once it is\navailable. For example:\n\n    Future<int> future = getFuture();\n    future.then((value) => handleValue(value))\n          .catchError((error) => handleError(error));\n\nA [Future] can be completed in two ways: with a value (\"the future succeeds\")\nor with an error (\"the future fails\"). Users can install callbacks for each\ncase. The result of registering a pair of callbacks is a new Future (the\n\"successor\") which in turn is completed with the result of invoking the\ncorresponding callback. The successor is completed with an error if the\ninvoked callback throws. For example:\n\n    Future<int> successor = future.then((int value) {\n        // Invoked when the future is completed with a value.\n        return 42;  // The successor is completed with the value 42.\n      },\n      onError: (e) {\n        // Invoked when the future is completed with an error.\n        if (canHandle(e)) {\n          return 499;  // The successor is completed with the value 499.\n        } else {\n          throw e;  // The successor is completed with the error e.\n        }\n      });\n\nIf a future does not have a successor but is completed with an error, it\nforwards the error message to the global error-handler. This special casing\nmakes sure that no error is silently dropped. However, it also means that\nerror handlers should be installed early, so that they are present as soon\nas a future is completed with an error. The following example demonstrates\nthis potential bug:\n\n    var future = getFuture();\n    new Timer(new Duration(milliseconds: 5), () {\n      // The error-handler is only attached 5ms after the future has been\n      // received. If the future fails in the mean-time it will forward the\n      // error to the global error-handler, even though there is code (just\n      // below) to handle the error.\n      future.then((value) { useValue(value); },\n                  onError: (e) { handleError(e); });\n    });\n\nIn general we discourage registering the two callbacks at the same time, but\nprefer to use [then] with one argument (the value handler), and to use\n[catchError] for handling errors. The missing callbacks (the error-handler\nfor [then], and the value-handler for [catchError]), are automatically\nconfigured to \"forward\" the value/error. Separating value and error-handling\ninto separate registration calls usually leads to code that is easier to\nreason about. In fact it makes asynchronous code very similar to synchronous\ncode:\n\n    // Synchronous code.\n    try {\n      int value = foo();\n      return bar(value);\n    } catch (e) {\n      return 499;\n    }\n\n Equivalent asynchronous code, based on futures:\n\n    Future<int> future = foo();  // foo now returns a future.\n    future.then((int value) => bar(value))\n          .catchError((e) => 499);\n\nSimilar to the synchronous code, the error handler (registered with\n[catchError]) is handling the errors for exceptions coming from calls to\n'foo', as well as 'bar'. This would not be the case if the error-handler was\nregistered at the same time as the value-handler.\n\nFutures can have more than one callback-pairs registered. Each successor is\ntreated independently and is handled as if it was the only successor.\n","uri":"dart-sdk/lib/async/future.dart","name":"Future","id":"Future","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","name":"List"}],"name":"Future"},"isStatic":true,"comment":"\nWait for all the given futures to complete and collect their values.\n\nReturns a future which will complete once all the futures in a list are\ncomplete. If any of the futures in the list completes with an error,\nthe resulting future also completes with an error. Otherwise the value\nof the returned future will be a list of all the values that were produced.\n","name":"wait","id":"wait1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.async/Future","name":"Future"}],"name":"Iterable"},"name":"futures","id":"futures","kind":"param"}],"line":"183","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"isStatic":true,"comment":"\nPerform an async operation for each element of the iterable, in turn.\n\nRuns [f] for each element in [input] in order, moving to the next element\nonly when the [Future] returned by [f] completes. Returns a [Future] that\ncompletes when all elements have been processed.\n\nThe return values of all [Future]s are discarded. Any errors will cause the\niteration to stop and will be piped through the returned [Future].\n","name":"forEach","id":"forEach2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/future.dart","name":"element","id":"element","line":"197","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"197","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nWhen this future completes with a value, then [onValue] is called with this\nvalue. If [this] future is already completed then the invocation of\n[onValue] is delayed until the next event-loop iteration.\n\nReturns a new [Future] `f` which is completed with the result of\ninvoking [onValue] (if [this] completes with a value) or [onError] (if\n[this] completes with an error).\n\nIf the invoked callback throws an exception, the returned future `f` is\ncompleted with the error.\n\nIf the invoked callback returns a [Future] `f2` then `f` and `f2` are\nchained. That is, `f` is completed with the completion value of `f2`.\n\nIf [onError] is not given, it is equivalent to `(e) { throw e; }`. That\nis, it forwards the error to `f`.\n\nIn most cases, it is more readable to use [catchError] separately, possibly\nwith a `test` parameter, instead of handling both value and error in a\nsingle [then] call.\n","name":"then","id":"then2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onValue","id":"onValue","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/Future/T","name":"T"},"uri":"dart-sdk/lib/async/future.dart","name":"value","id":"value","line":"234","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"uri":"dart-sdk/lib/async/future.dart","name":"error","id":"error","line":"234","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"234","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"\nHandles errors emitted by this [Future].\n\nReturns a new [Future] `f`.\n\nWhen [this] completes with a value, the value is forwarded to `f`\nunmodified. That is, `f` completes with the same value.\n\nWhen [this] completes with an error, [test] is called with the\nerror's value. If the invocation returns [true], [onError] is called with\nthe error. The result of [onError] is handled exactly the same as for\n[then]'s [onError].\n\nIf [test] returns false, the exception is not handled by [onError], but is\nthrown unmodified, thus forwarding it to `f`.\n\nIf [test] is omitted, it defaults to a function that always returns true.\n\nExample:\n\n    foo\n      .catchError(..., test: (e) => e is ArgumentError)\n      .catchError(..., test: (e) => e is NoSuchMethodError)\n      .then((v) { ... });\n\nThis method is equivalent to:\n\n    Future catchError(onError(error),\n                      {bool test(error)}) {\n      this.then((v) => v,  // Forward the value.\n                // But handle errors, if the [test] succeeds.\n                onError: (e) {\n                  if (test == null || test(e)) {\n                    return onError(e);\n                  }\n                  throw e;\n                });\n    }\n\n","name":"catchError","id":"catchError2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onError","id":"onError","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"uri":"dart-sdk/lib/async/future.dart","name":"error","id":"error","line":"276","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"uri":"dart-sdk/lib/async/future.dart","name":"error","id":"error","line":"277","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"277","kind":"param"}],"line":"276","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Future/T","name":"T"}],"name":"Future"},"comment":"\nRegister a function to be called when this future completes.\n\nThe [action] function is called when this future completes, whether it\ndoes so with a value or with an error.\n\nThis is the asynchronous equivalent of a \"finally\" block.\n\nThe future returned by this call, `f`, will complete the same way\nas this future unless an error occurs in the [action] call, or in\na [Future] returned by the [action] call. If the call to [action]\ndoes not return a future, its return value is ignored.\n\nIf the call to [action] throws, then `f` is completed with the\nthrown error.\n\nIf the call to [action] returns a [Future], `f2`, then completion of\n`f` is delayed until `f2` completes. If `f2` completes with\nan error, that will be the result of `f` too. The value of `f2` is always\nignored.\n\nThis method is equivalent to:\n\n    Future<T> whenComplete(action()) {\n      this.then((v) {\n                  var f2 = action();\n                  if (f2 is Future) return f2.then((_) => v);\n                  return v\n                },\n                onError: (e) {\n                  var f2 = action();\n                  if (f2 is Future) return f2.then((_) { throw e; });\n                  throw e;\n                });\n    }\n","name":"whenComplete","id":"whenComplete1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"315","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Future/T","name":"T"}],"name":"Stream"},"comment":"\nCreates a [Stream] that sends [this]' completion value, data or error, to\nits subscribers. The stream closes after the completion value.\n","name":"asStream","id":"asStream0()","line":"321","kind":"method"},{"comment":"\nCreates a future containing the result of calling [computation]\nasynchronously with [runAsync].\n\nif the result of executing [computation] throws, the returned future is\ncompleted with the error. If a thrown value is an [AsyncError], it is used\ndirectly, instead of wrapping this error again in another [AsyncError].\n\nIf the returned value is itself a [Future], completion of\nthe created future will wait until the returned future completes,\nand will then complete with the same result.\n\nIf a value is returned, it becomes the result of the created future.\n","name":"Future","id":"Future1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"computation","id":"computation","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"102","kind":"constructor"},{"comment":"\nCreates a future containing the result of immediately calling\n[computation].\n\nif the result of executing [computation] throws, the returned future is\ncompleted with the error. If a thrown value is an [AsyncError], it is used\ndirectly, instead of wrapping this error again in another [AsyncError].\n\nIf the returned value is itself a [Future], completion of\nthe created future will wait until the returned future completes,\nand will then complete with the same result.\n","name":"Future.sync","id":"Future.sync1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"computation","id":"computation","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"121","kind":"constructor"},{"comment":"\nA future whose value is available in the next event-loop iteration.\n\nIf [value] is not a [Future], using this constructor is equivalent\nto [:new Future.sync(() => value):].\n\nSee [Completer] to create a Future and complete it later.\n","name":"Future.value","id":"Future.value1()","children":[{"ref":{"refId":"dart.async/Future/T","name":"T"},"isOptional":true,"name":"value","id":"value","kind":"param"}],"line":"138","kind":"constructor"},{"comment":"\nA future that completes with an error in the next event-loop iteration.\n\nSee [Completer] to create a Future and complete it later.\n","name":"Future.error","id":"Future.error2()","children":[{"name":"error","id":"error","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"name":"stackTrace","id":"stackTrace","kind":"param"}],"line":"145","kind":"constructor"},{"comment":"\nCreates a future that completes after a delay.\n\nThe future will be completed after the given [duration] has passed with\nthe result of calling [computation]. If the duration is 0 or less, it\ncompletes no sooner than in the next event-loop iteration.\n\nIf [computation] is not given or [:null:] then it will behave as if\n[computation] was set to [:() => null:]. That is, it will complete with\n[:null:].\n\nIf calling [computation] throws, the created future will complete with the\nerror.\n\nSee [Completer]s, for futures with values that are computed asynchronously.\n","name":"Future.delayed","id":"Future.delayed2()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"duration","id":"duration","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"computation","id":"computation","children":[{"returnType":{"refId":"dart.async/Future/T","name":"T"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"165","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"86","kind":"class"}],"line":"5","kind":"library"}],"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","id":"error_group","children":[{"superclass":{"refId":"dart.async/Stream","name":"Stream"},"comment":"A [Stream] wrapper that keeps track of whether it's been completed and\nwhether it has any listeners. It also notifies its parent [ErrorGroup] when\nit completes successfully or receives an error.","name":"_ErrorGroupStream","isPrivate":true,"id":"_ErrorGroupStream","children":[{"returnType":{"refId":"dart.async/StreamSubscription","name":"StreamSubscription"},"name":"listen","id":"listen4()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onData","id":"onData","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","name":"value","id":"value","line":"257","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","name":"error","id":"error","line":"258","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"258","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onDone","id":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"line":"258","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"cancelOnError","id":"cancelOnError","line":"259","kind":"param"}],"line":"257","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Signal that an error from [_group] should be propagated through [this],\nunless it's already complete.","name":"_signalError","isPrivate":true,"id":"_signalError1()","children":[{"name":"e","id":"e","kind":"param"}],"line":"268","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether [this] has any listeners.","name":"_hasListeners","isPrivate":true,"id":"_hasListeners","line":"237","kind":"property"},{"ref":{"refId":"error_group/ErrorGroup","name":"ErrorGroup"},"isFinal":true,"comment":"The parent [ErrorGroup].","name":"_group","isPrivate":true,"id":"_group","line":"220","kind":"variable"},{"comment":"Whether [this] has completed, either successfully or with an error.","name":"_isDone","isPrivate":true,"id":"_isDone","line":"223","kind":"variable"},{"ref":{"refId":"dart.async/StreamController","name":"StreamController"},"isFinal":true,"comment":"The underlying [StreamController] for [this].","name":"_controller","isPrivate":true,"id":"_controller","line":"226","kind":"variable"},{"ref":{"refId":"dart.async/Stream","name":"Stream"},"comment":"The controller's [Stream]. May be different than `_controller.stream` if\nthe wrapped stream is a broadcasting stream.","name":"_stream","isPrivate":true,"id":"_stream","line":"230","kind":"variable"},{"ref":{"refId":"dart.async/StreamSubscription","name":"StreamSubscription"},"comment":"The [StreamSubscription] that connects the wrapped [Stream] to\n[_controller].","name":"_subscription","isPrivate":true,"id":"_subscription","line":"234","kind":"variable"},{"comment":"Creates a new [_ErrorGroupFuture] that's a child of [_group] and wraps\n[inner].","name":"_ErrorGroupStream","id":"_ErrorGroupStream2()","children":[{"initializedField":{"refId":"error_group/_ErrorGroupStream/_group","name":"_group"},"ref":{"refId":"error_group/ErrorGroup","name":"ErrorGroup"},"name":"_group","isPrivate":true,"id":"_group","kind":"param"},{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"inner","id":"inner","kind":"param"}],"line":"241","kind":"constructor"}],"line":"218","kind":"class"},{"interfaces":[{"refId":"dart.async/Future","name":"Future"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A [Future] wrapper that keeps track of whether it's been completed and\nwhether it has any listeners. It also notifies its parent [ErrorGroup] when\nit completes successfully or receives an error.","name":"_ErrorGroupFuture","isPrivate":true,"id":"_ErrorGroupFuture","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"then","id":"then2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onValue","id":"onValue","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","name":"value","id":"value","line":"184","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","name":"error","id":"error","line":"184","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"184","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"catchError","id":"catchError2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"onError","id":"onError","children":[{"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","name":"error","id":"error","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/error_group.dart","name":"error","id":"error","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"name":"whenComplete","id":"whenComplete1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"194","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"name":"asStream","id":"asStream0()","line":"199","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Signal that an error from [_group] should be propagated through [this],\nunless it's already complete.","name":"_signalError","isPrivate":true,"id":"_signalError1()","children":[{"name":"error","id":"error","kind":"param"}],"line":"206","kind":"method"},{"ref":{"refId":"error_group/ErrorGroup","name":"ErrorGroup"},"isFinal":true,"comment":"The parent [ErrorGroup].","name":"_group","isPrivate":true,"id":"_group","line":"159","kind":"variable"},{"comment":"Whether [this] has completed, either successfully or with an error.","name":"_isDone","isPrivate":true,"id":"_isDone","line":"162","kind":"variable"},{"isFinal":true,"comment":"The underlying [Completer] for [this].","name":"_completer","isPrivate":true,"id":"_completer","line":"165","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether [this] has any listeners.","name":"_hasListeners","isPrivate":true,"id":"_hasListeners","line":"168","kind":"variable"},{"comment":"Creates a new [_ErrorGroupFuture] that's a child of [_group] and wraps\n[inner].","name":"_ErrorGroupFuture","id":"_ErrorGroupFuture2()","children":[{"initializedField":{"refId":"error_group/_ErrorGroupFuture/_group","name":"_group"},"ref":{"refId":"error_group/ErrorGroup","name":"ErrorGroup"},"name":"_group","isPrivate":true,"id":"_group","kind":"param"},{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"inner","id":"inner","kind":"param"}],"line":"172","kind":"constructor"}],"line":"157","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An [ErrorGroup] entangles the errors of multiple [Future]s and [Stream]s\nwith one another. This allows APIs to expose multiple [Future]s and\n[Stream]s that have identical error conditions without forcing API consumers\nto attach error handling to objects they don't care about.\n\nTo use an [ErrorGroup], register [Future]s and [Stream]s with it using\n[registerFuture] and [registerStream]. These methods return wrapped versions\nof the [Future]s and [Stream]s, which should then be used in place of the\noriginals. For example:\n\n    var errorGroup = new ErrorGroup();\n    future = errorGroup.registerFuture(future);\n    stream = errorGroup.registerStream(stream);\n\nAn [ErrorGroup] has two major effects on its wrapped members:\n\n* An error in any member of the group will be propagated to every member\n  that hasn't already completed. If those members later complete, their\n  values will be ignored.\n* If any member of this group has a listener, errors on members without\n  listeners won't get passed to the top-level error handler.","name":"ErrorGroup","id":"ErrorGroup","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Registers a [Future] as a member of [this]. Returns a wrapped version of\n[future] that should be used in its place.\n\nIf all members of [this] have already completed successfully or with an\nerror, it's a [StateError] to try to register a new [Future].","name":"registerFuture","id":"registerFuture1()","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"future","id":"future","kind":"param"}],"line":"68","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"comment":"Registers a [Stream] as a member of [this]. Returns a wrapped version of\n[stream] that should be used in its place. The returned [Stream] will be\nmulti-subscription if and only if [stream] is.\n\nSince all errors in a group are passed to all members, the returned\n[Stream] will automatically unsubscribe all its listeners when it\nencounters an error.\n\nIf all members of [this] have already completed successfully or with an\nerror, it's a [StateError] to try to register a new [Stream].","name":"registerStream","id":"registerStream1()","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"89","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sends [error] to all members of [this]. Like errors that come from\nmembers, this will only be passed to the top-level error handler if no\nmembers have listeners.\n\nIf all members of [this] have already completed successfully or with an\nerror, it's a [StateError] to try to signal an error.","name":"signalError","id":"signalError1()","children":[{"name":"error","id":"error","kind":"param"}],"line":"106","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Signal an error internally. This is just like [signalError], but instead\nof throwing an error if [this] is complete, it just does nothing.","name":"_signalError","isPrivate":true,"id":"_signalError1()","children":[{"name":"error","id":"error","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Notifies [this] that one of its member [Future]s is complete.","name":"_signalFutureComplete","isPrivate":true,"id":"_signalFutureComplete1()","children":[{"ref":{"refId":"error_group/_ErrorGroupFuture","name":"_ErrorGroupFuture"},"name":"future","id":"future","kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Notifies [this] that one of its member [Stream]s is complete.","name":"_signalStreamComplete","isPrivate":true,"id":"_signalStreamComplete1()","children":[{"ref":{"refId":"error_group/_ErrorGroupStream","name":"_ErrorGroupStream"},"name":"stream","id":"stream","kind":"param"}],"line":"145","kind":"method"},{"ref":{"refId":"dart.async/Future","name":"Future"},"comment":"Returns a [Future] that completes successully when all members of [this]\nare complete, or with an error if any member receives an error.\n\nThis [Future] is effectively in the group in that an error on it won't be\npassed to the top-level error handler unless no members of the group have\nlisteners attached.","name":"done","id":"done","line":"56","kind":"property"},{"isFinal":true,"comment":"The [Future]s that are members of [this].","name":"_futures","isPrivate":true,"id":"_futures","line":"34","kind":"variable"},{"isFinal":true,"comment":"The [Stream]s that are members of [this].","name":"_streams","isPrivate":true,"id":"_streams","line":"37","kind":"variable"},{"comment":"Whether [this] has completed, either successfully or with an error.","name":"_isDone","isPrivate":true,"id":"_isDone","line":"40","kind":"variable"},{"isFinal":true,"comment":"The [Completer] for [done].","name":"_doneCompleter","isPrivate":true,"id":"_doneCompleter","line":"43","kind":"variable"},{"ref":{"refId":"error_group/_ErrorGroupFuture","name":"_ErrorGroupFuture"},"comment":"The underlying [Future] for [done]. We need to be able to access it\ninternally as an [_ErrorGroupFuture] so we can check if it has listeners\nand signal errors on it.","name":"_done","isPrivate":true,"id":"_done","line":"48","kind":"variable"},{"comment":"Creates a new group with no members.","name":"ErrorGroup","id":"ErrorGroup0()","line":"59","kind":"constructor"}],"line":"32","kind":"class"}],"line":"5","kind":"library"}