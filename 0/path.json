{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"A comprehensive, cross-platform path manipulation library.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your\n`pubspec.yaml` file.\n\n    dependencies:\n      pathos: any\n\nThen run `pub install`.\n\nFor more information, see the\n[pathos package on pub.dartlang.org][pkg].\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/pathos","uri":"package:pathos/path.dart","name":"package:pathos/path.dart","id":"path","children":[{"comment":"Validates that there are no non-null arguments following a null one and\nthrows an appropriate [ArgumentError] on failure.","name":"_validateArgList","isPrivate":true,"id":"_validateArgList2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"method","id":"method","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"args","id":"args","kind":"param"}],"line":"213","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Removes a trailing extension from the last part of [path].\n\n    withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","name":"withoutExtension","id":"withoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Attempts to convert [path] to an equivalent relative path from the current\ndirectory.\n\n    // Given current directory is /root/path:\n    path.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    path.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    path.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    path.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on Windows,\nthis will return an absolute path in that case.\n\n    path.relative(r'D:\\other', from: r'C:\\home'); // -> 'D:\\other'","name":"relative","id":"relative2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"from","id":"from","kind":"param"}],"line":"203","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    path.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","name":"normalize","id":"normalize1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"183","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits [path] into its components using the current platform's [separator].\n\n    path.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    path.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    path.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    path.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']","name":"split","id":"split1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"177","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","name":"joinAll","id":"joinAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"name":"parts","id":"parts","kind":"param"}],"line":"158","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.join('path', '/to', 'foo'); // -> '/to/foo'","name":"join","id":"join8()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"part1","id":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part2","id":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part3","id":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part4","id":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part5","id":"part5","line":"140","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part6","id":"part6","line":"140","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part7","id":"part7","line":"140","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part8","id":"part8","line":"140","kind":"param"}],"line":"139","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","name":"isRelative","id":"isRelative1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path. On POSIX systems, absolute paths start with a `/` (forward\nslash). On Windows, an absolute path starts with `\\\\`, or a drive letter\nfollowed by `:/` or `:\\`.","name":"isAbsolute","id":"isAbsolute1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the root of [path], if it's absolute, or the empty string if it's\nrelative.\n\n    // Unix\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    path.rootPrefix(r'path\\to\\foo'); // -> ''\n    path.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'","name":"rootPrefix","id":"rootPrefix1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"112","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    path.extension('path/to/foo.dart');    // -> '.dart'\n    path.extension('path/to/foo');         // -> ''\n    path.extension('path.to/foo');         // -> ''\n    path.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then that is not considered the\nextension:\n\n    path.extension('~/.bashrc');    // -> ''\n    path.extension('~/.notes.txt'); // -> '.txt'","name":"extension","id":"extension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"99","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] before the last separator.\n\n    path.dirname('path/to/foo.dart'); // -> 'path/to'\n    path.dirname('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","name":"dirname","id":"dirname1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator, and without any trailing\nfile extension.\n\n    path.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","name":"basenameWithoutExtension","id":"basenameWithoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"73","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator.\n\n    path.basename('path/to/foo.dart'); // -> 'foo.dart'\n    path.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","name":"basename","id":"basename1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Converts [path] to an absolute path by resolving it relative to the current\nworking directory. If [path] is already an absolute path, just returns it.\n\n    path.absolute('foo/bar.txt'); // -> /your/current/dir/foo/bar.txt","name":"absolute","id":"absolute1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","name":"separator","id":"separator0()","line":"47","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path to the current working directory.","name":"current","id":"current0()","line":"43","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInserts [length] elements in front of the [list] and fills them with the\n[fillValue].\n","name":"_growListFront","isPrivate":true,"id":"_growListFront3()","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"list","id":"list","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"},{"name":"fillValue","id":"fillValue","kind":"param"}],"line":"34","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","name":"separator","id":"separator","line":"47","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path to the current working directory.","name":"current","id":"current","line":"43","kind":"property"},{"isFinal":true,"comment":"An internal builder for the current OS so we can provide a straight\nfunctional interface and not require users to create one.","name":"_builder","isPrivate":true,"id":"_builder","line":"28","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"_ParsedPath","isPrivate":true,"id":"_ParsedPath","children":[{"returnType":{"refId":"void","name":"void"},"name":"removeTrailingSeparators","id":"removeTrailingSeparators0()","line":"679","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"normalize","id":"normalize0()","line":"687","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"731","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits the last part of the path into a two-element list. The first is\nthe name of the file without any extension. The second is the extension\nor \"\" if it has none.","name":"_splitExtension","isPrivate":true,"id":"_splitExtension0()","line":"745","kind":"method"},{"returnType":{"refId":"path/_ParsedPath","name":"_ParsedPath"},"name":"clone","id":"clone0()","line":"760","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The file extension of the last part, or \"\" if it doesn't have one.","name":"extension","id":"extension","line":"658","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"`true` if this is an absolute path.","name":"isAbsolute","id":"isAbsolute","line":"661","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"basename","id":"basename","line":"665","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"basenameWithoutExtension","id":"basenameWithoutExtension","line":"672","kind":"property"},{"ref":{"refId":"path/Style","name":"Style"},"comment":"The [Style] that was used to parse this path.","name":"style","id":"style","line":"641","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The absolute root portion of the path, or `null` if the path is relative.\nOn POSIX systems, this will be `null` or \"/\". On Windows, it can be\n`null`, \"//\" for a UNC path, or something like \"C:\\\" for paths with drive\nletters.","name":"root","id":"root","line":"647","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"The path-separated parts of the path. All but the last will be\ndirectories.","name":"parts","id":"parts","line":"651","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"The path separators following each part. The last one will be an empty\nstring unless the path ends with a trailing separator.","name":"separators","id":"separators","line":"655","kind":"variable"},{"name":"_ParsedPath","id":"_ParsedPath4()","children":[{"initializedField":{"refId":"path/_ParsedPath/style","name":"style"},"ref":{"refId":"path/Style","name":"Style"},"name":"style","id":"style","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/root","name":"root"},"ref":{"refId":"dart.core/String","name":"String"},"name":"root","id":"root","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/parts","name":"parts"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"parts","id":"parts","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/separators","name":"separators"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"separators","id":"separators","kind":"param"}],"line":"663","kind":"constructor"}],"line":"639","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An enum type describing a \"flavor\" of path.","name":"Style","id":"Style","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the root prefix of [path] if path is absolute. If [path] is relative,\nreturns `null`.","name":"getRoot","id":"getRoot1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"629","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"635","kind":"method"},{"isFinal":true,"isStatic":true,"comment":"POSIX-style paths use \"/\" (forward slash) as separators. Absolute paths\nstart with \"/\". Used by UNIX, Linux, Mac OS X, and others.","name":"posix","id":"posix","line":"595","kind":"variable"},{"isFinal":true,"isStatic":true,"comment":"Windows paths use \"\\\" (backslash) as separators. Absolute paths start with\na drive letter followed by a colon (example, \"C:\") or two backslashes\n(\"\\\\\") for UNC paths.","name":"windows","id":"windows","line":"602","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The name of this path style. Will be \"posix\" or \"windows\".","name":"name","id":"name","line":"611","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The path separator for this style. On POSIX, this is `/`. On Windows,\nit's `\\`.","name":"separator","id":"separator","line":"615","kind":"variable"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"isFinal":true,"comment":"The [Pattern] that can be used to match a separator for a path in this\nstyle. Windows allows both \"/\" and \"\\\" as path separators even though\n\"\\\" is the canonical one.","name":"separatorPattern","id":"separatorPattern","line":"620","kind":"variable"},{"ref":{"refId":"dart.core/RegExp","name":"RegExp"},"isFinal":true,"comment":"The [RegExp] that can be used to match the root prefix of an absolute\npath in this style.","name":"_rootPattern","isPrivate":true,"id":"_rootPattern","line":"625","kind":"variable"},{"name":"Style._","isPrivate":true,"id":"Style._4()","children":[{"initializedField":{"refId":"path/Style/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"path/Style/separator","name":"separator"},"ref":{"refId":"dart.core/String","name":"String"},"name":"separator","id":"separator","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"separatorPattern","id":"separatorPattern","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"rootPattern","id":"rootPattern","line":"606","kind":"param"}],"line":"605","kind":"constructor"}],"line":"592","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An instantiable class for manipulating paths. Unlike the top-level\nfunctions, this lets you explicitly select what platform the paths will use.","name":"Builder","id":"Builder","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator on the builder's\nplatform.\n\n    builder.basename('path/to/foo.dart'); // -> 'foo.dart'\n    builder.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","name":"basename","id":"basename1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"277","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] after the last separator on the builder's\nplatform, and without any trailing file extension.\n\n    builder.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","name":"basenameWithoutExtension","id":"basenameWithoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"287","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the part of [path] before the last separator.\n\n    builder.dirname('path/to/foo.dart'); // -> 'path/to'\n    builder.dirname('path/to');          // -> 'path'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","name":"dirname","id":"dirname1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"298","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    builder.extension('path/to/foo.dart'); // -> '.dart'\n    builder.extension('path/to/foo'); // -> ''\n    builder.extension('path.to/foo'); // -> ''\n    builder.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then it is not considered an\nextension:\n\n    builder.extension('~/.bashrc');    // -> ''\n    builder.extension('~/.notes.txt'); // -> '.txt'","name":"extension","id":"extension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"324","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the root of [path], if it's absolute, or an empty string if it's\nrelative.\n\n    // Unix\n    builder.rootPrefix('path/to/foo'); // -> ''\n    builder.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    builder.rootPrefix(r'path\\to\\foo'); // -> ''\n    builder.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'","name":"rootPrefix","id":"rootPrefix1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"337","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path. On POSIX systems, absolute paths start with a `/` (forward\nslash). On Windows, an absolute path starts with `\\\\`, or a drive letter\nfollowed by `:/` or `:\\`.","name":"isAbsolute","id":"isAbsolute1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"346","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","name":"isRelative","id":"isRelative1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"352","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path. Example:\n\n    builder.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.join('path', '/to', 'foo'); // -> '/to/foo'\n","name":"join","id":"join8()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"part1","id":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part2","id":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part3","id":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part4","id":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part5","id":"part5","line":"368","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part6","id":"part6","line":"368","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part7","id":"part7","line":"368","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part8","id":"part8","line":"368","kind":"param"}],"line":"367","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Joins the given path parts into a single path. Example:\n\n    builder.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","name":"joinAll","id":"joinAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"name":"parts","id":"parts","kind":"param"}],"line":"388","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits [path] into its components using the current platform's\n[separator]. Example:\n\n    builder.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    builder.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    builder.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    builder.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']","name":"split","id":"split1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"434","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    builder.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","name":"normalize","id":"normalize1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"447","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Creates a new path by appending the given path parts to the [root].\nEquivalent to [join()] with [root] as the first argument. Example:\n\n    var builder = new Builder(root: 'root');\n    builder.resolve('path', 'to', 'foo'); // -> 'root/path/to/foo'","name":"resolve","id":"resolve7()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"part1","id":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part2","id":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part3","id":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part4","id":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part5","id":"part5","line":"461","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part6","id":"part6","line":"461","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"part7","id":"part7","line":"461","kind":"param"}],"line":"460","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Attempts to convert [path] to an equivalent relative path relative to\n[root].\n\n    var builder = new Builder(root: '/root/path');\n    builder.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    builder.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on\nWindows, this will return an absolute path in that case.\n\n    builder.relative(r'D:\\other', from: r'C:\\other'); // -> 'D:\\other'\n\nThis will also return an absolute path if an absolute [path] is passed to\na builder with a relative [root].\n\n    var builder = new Builder(r'some/relative/path');\n    builder.relative(r'/absolute/path'); // -> '/absolute/path'","name":"relative","id":"relative2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"from","id":"from","kind":"param"}],"line":"489","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Removes a trailing extension from the last part of [path].\n\n    builder.withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","name":"withoutExtension","id":"withoutExtension1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"551","kind":"method"},{"returnType":{"refId":"path/_ParsedPath","name":"_ParsedPath"},"name":"_parse","isPrivate":true,"id":"_parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"564","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Gets the path separator for the builder's [style]. On Mac and Linux,\nthis is `/`. On Windows, it's `\\`.","name":"separator","id":"separator","line":"266","kind":"property"},{"ref":{"refId":"path/Style","name":"Style"},"isFinal":true,"comment":"The style of path that this builder works with.","name":"style","id":"style","line":"259","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The root directory that relative paths will be relative to.","name":"root","id":"root","line":"262","kind":"variable"},{"comment":"Creates a new path builder for the given style and root directory.\n\nIf [style] is omitted, it uses the host operating system's path style. If\n[root] is omitted, it defaults to the current working directory. If [root]\nis relative, it is considered relative to the current working directory.","name":"Builder","id":"Builder2()","children":[{"isNamed":true,"ref":{"refId":"path/Style","name":"Style"},"isOptional":true,"name":"style","id":"style","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"root","id":"root","kind":"param"}],"line":"242","kind":"constructor"},{"name":"Builder._","isPrivate":true,"id":"Builder._2()","children":[{"initializedField":{"refId":"path/Builder/style","name":"style"},"ref":{"refId":"path/Style","name":"Style"},"name":"style","id":"style","kind":"param"},{"initializedField":{"refId":"path/Builder/root","name":"root"},"ref":{"refId":"dart.core/String","name":"String"},"name":"root","id":"root","kind":"param"}],"line":"256","kind":"constructor"}],"line":"236","kind":"class"}],"line":"22","kind":"library"}