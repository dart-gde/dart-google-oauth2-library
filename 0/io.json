{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","uri":"dart-sdk/lib/core/exceptions.dart","name":"Exception","id":"Exception","children":[{"name":"Exception","id":"Exception1()","children":[{"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"21","kind":"constructor"}],"line":"20","kind":"class"}],"line":"5","kind":"library"}],"comment":"Helper functionality to make working with IO easier.","uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/io.dart","id":"io","children":[{"returnType":{"refId":"dart.uri/Uri","name":"Uri"},"comment":"Gets a [Uri] for [uri], which can either already be one, or be a [String].","name":"_getUri","isPrivate":true,"id":"_getUri1()","children":[{"name":"uri","id":"uri","kind":"param"}],"line":"701","kind":"method"},{"returnType":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"comment":"Create a .tar.gz archive from a list of entries. Each entry can be a\n[String], [Directory], or [File] object. The root of the archive is\nconsidered to be [baseDir], which defaults to the current working directory.\nReturns a [ByteStream] that will emit the contents of the archive.","name":"createTarGz","id":"createTarGz2()","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"contents","id":"contents","kind":"param"},{"isNamed":true,"isOptional":true,"name":"baseDir","id":"baseDir","kind":"param"}],"line":"608","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"name":"_extractTarGzWindows","isPrivate":true,"id":"_extractTarGzWindows2()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"destination","id":"destination","line":"555","kind":"param"}],"line":"554","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"Extracts a `.tar.gz` file from [stream] to [destination]. Returns whether\nor not the extraction was successful.","name":"extractTarGz","id":"extractTarGz2()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"destination","id":"destination","kind":"param"}],"line":"526","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Creates a temporary directory and passes its path to [fn]. Once the [Future]\nreturned by [fn] completes, the temporary directory and all its contents\nwill be deleted. [fn] can also return `null`, in which case the temporary\ndirectory is deleted immediately afterwards.\n\nReturns a future that completes to the value that the future returned from\n[fn] completes to.","name":"withTempDir","id":"withTempDir1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"fn","id":"fn","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/String","name":"String"},"uri":"dart-google-oauth2-library/lib/src/console/oauth2_console_client/io.dart","name":"path","id":"path","line":"516","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"516","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Wraps [input] to provide a timeout. If [input] completes before\n[milliseconds] have passed, then the return value completes in the same way.\nHowever, if [milliseconds] pass before [input] has completed, it completes\nwith a [TimeoutException] with [description] (which should be a fragment\ndescribing the action that timed out).\n\nNote that timing out will not cancel the asynchronous operation behind\n[input].","name":"timeout","id":"timeout3()","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"input","id":"input","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"milliseconds","id":"milliseconds","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"description","id":"description","kind":"param"}],"line":"491","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Calls [fn] with appropriately modified arguments. [fn] should have the same\nsignature as [Process.start], except that the returned [Future] may have a\ntype other than [Process].","name":"_doProcess","isPrivate":true,"id":"_doProcess5()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"fn","id":"fn","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"executable","id":"executable","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"args","id":"args","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"workingDir","id":"workingDir","line":"457","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"environment","id":"environment","line":"457","kind":"param"}],"line":"456","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"io/PubProcess","name":"PubProcess"}],"name":"Future"},"comment":"Spawns the process located at [executable], passing in [args]. Returns a\n[Future] that will complete with the [Process] once it's been started.\n\nThe spawned process will inherit its parent's environment variables. If\n[environment] is provided, that will be used to augment (not replace) the\nthe inherited variables.","name":"startProcess","id":"startProcess4()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"executable","id":"executable","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"args","id":"args","kind":"param"},{"isNamed":true,"isOptional":true,"name":"workingDir","id":"workingDir","line":"366","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isOptional":true,"name":"environment","id":"environment","line":"366","kind":"param"}],"line":"365","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"io/PubProcessResult","name":"PubProcessResult"}],"name":"Future"},"comment":"Spawns and runs the process located at [executable], passing in [args].\nReturns a [Future] that will complete with the results of the process after\nit has ended.\n\nThe spawned process will inherit its parent's environment variables. If\n[environment] is provided, that will be used to augment (not replace) the\nthe inherited variables.","name":"runProcess","id":"runProcess4()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"executable","id":"executable","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"args","id":"args","kind":"param"},{"isNamed":true,"isOptional":true,"name":"workingDir","id":"workingDir","line":"340","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isOptional":true,"name":"environment","id":"environment","line":"340","kind":"param"}],"line":"339","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Pipes all data and errors from [stream] into [sink]. When [stream] is done,\nthe returned [Future] is completed and [sink] is closed if [closeSink] is\ntrue.\n\nWhen an error occurs on [stream], that error is passed to [sink]. If\n[cancelOnError] is true, [Future] will be completed successfully and no\nmore data or errors will be piped from [stream] to [sink]. If\n[cancelOnError] and [closeSink] are both true, [sink] will then be\nclosed.","name":"store","id":"store4()","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"stream","id":"stream","kind":"param"},{"ref":{"refId":"dart.async/EventSink","name":"EventSink"},"name":"sink","id":"sink","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"cancelOnError","id":"cancelOnError","line":"315","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"true","name":"closeSink","id":"closeSink","line":"315","kind":"param"}],"line":"314","kind":"method"},{"returnType":{"refId":"utils/Pair","arguments":[{"refId":"dart.async/EventSink","name":"EventSink"},{"refId":"dart.async/Future","name":"Future"}],"name":"Pair"},"comment":"Returns a [EventSink] that pipes all data to [consumer] and a [Future] that\nwill succeed when [EventSink] is closed or fail with any errors that occur\nwhile writing.","name":"consumerToSink","id":"consumerToSink1()","children":[{"ref":{"refId":"dart.async/StreamConsumer","name":"StreamConsumer"},"name":"consumer","id":"consumer","kind":"param"}],"line":"298","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Reads and discards all output from [stream]. Returns a [Future] that\ncompletes when the stream is closed.","name":"drainStream","id":"drainStream1()","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"comment":"Displays a message and reads a yes/no confirmation from the user. Returns\na [Future] that completes to `true` if the user confirms or `false` if they\ndo not.\n\nThis will automatically append \" (y/n)?\" to the message, so [message]\nshould just be a fragment like, \"Are you sure you want to proceed\".","name":"confirm","id":"confirm1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"282","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Resolves [target] relative to the location of pub.dart.","name":"relativeToPub","id":"relativeToPub1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"target","id":"target","kind":"param"}],"line":"256","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Creates a new symlink that creates an alias at [symlink] that points to the\n`lib` directory of package [target]. If [target] does not have a `lib`\ndirectory, this shows a warning if appropriate and then does nothing.\n\nIf [relative] is true, creates a symlink with a relative path from the\nsymlink to the target. Otherwise, uses the [target] path unmodified.","name":"createPackageSymlink","id":"createPackageSymlink5()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"target","id":"target","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"symlink","id":"symlink","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"isSelfLink","id":"isSelfLink","line":"237","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"relative","id":"relative","line":"237","kind":"param"}],"line":"236","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Creates a new symlink at path [symlink] that points to [target]. Returns a\n[Future] which completes to the path to the symlink file.\n\nIf [relative] is true, creates a symlink with a relative path from the\nsymlink to the target. Otherwise, uses the [target] path unmodified.\n\nNote that on Windows, only directories may be symlinked to.","name":"createSymlink","id":"createSymlink3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"target","id":"target","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"symlink","id":"symlink","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"relative","id":"relative","line":"212","kind":"param"}],"line":"211","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Renames (i.e. moves) the directory [from] to [to].","name":"renameDir","id":"renameDir2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"from","id":"from","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"to","id":"to","kind":"param"}],"line":"199","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\"Cleans\" [dir]. If that directory already exists, it will be deleted. Then a\nnew empty directory will be created.","name":"cleanDir","id":"cleanDir1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"dir","id":"dir","kind":"param"}],"line":"193","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Deletes whatever's at [path], whether it's a file, directory, or symlink. If\nit's a directory, it will be deleted recursively.","name":"deleteEntry","id":"deleteEntry1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns whether [dir] exists on the file system. This will return `true` for\na symlink only if that symlink is unbroken and points to a directory.","name":"dirExists","id":"dirExists1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"dir","id":"dir","kind":"param"}],"line":"174","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Lists the contents of [dir]. If [recursive] is `true`, lists subdirectory\ncontents (defaults to `false`). If [includeHidden] is `true`, includes files\nand directories beginning with `.` (defaults to `false`).\n\nThe returned paths are guaranteed to begin with [dir].","name":"listDir","id":"listDir3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"dir","id":"dir","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"recursive","id":"recursive","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"includeHidden","id":"includeHidden","line":"134","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Creates a temp directory whose name will be based on [dir] with a unique\nsuffix appended to it. If [dir] is not provided, a temp directory will be\ncreated in a platform-dependent temporary location. Returns the path of the\ncreated directory.","name":"createTempDir","id":"createTempDir1()","children":[{"isOptional":true,"defaultValue":"''","name":"dir","id":"dir","kind":"param"}],"line":"122","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Ensures that [dirPath] and all its parent directories exist. If they don't\nexist, creates them.","name":"ensureDir","id":"ensureDir1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"dirPath","id":"dirPath","kind":"param"}],"line":"97","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Creates a directory [dir].","name":"createDir","id":"createDir1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"dir","id":"dir","kind":"param"}],"line":"90","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Future"},"comment":"Writes [stream] to a new file at path [file]. Will replace any file already\nat that path. Completes when the file is done being written.","name":"createFileFromStream","id":"createFileFromStream2()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"file","id":"file","kind":"param"}],"line":"80","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Creates [file] and writes [contents] to it.","name":"writeBinaryFile","id":"writeBinaryFile2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"file","id":"file","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"contents","id":"contents","kind":"param"}],"line":"69","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Creates [file] and writes [contents] to it.\n\nIf [dontLogContents] is true, the contents of the file will never be logged.","name":"writeTextFile","id":"writeTextFile3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"file","id":"file","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"contents","id":"contents","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"false","name":"dontLogContents","id":"dontLogContents","kind":"param"}],"line":"57","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"Reads the contents of the binary file [file].","name":"readBinaryFile","id":"readBinaryFile1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"file","id":"file","kind":"param"}],"line":"47","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Reads the contents of the text file [file].","name":"readTextFile","id":"readTextFile1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"file","id":"file","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns whether [file] exists on the file system. This will return `true`\nfor a symlink only if that symlink is unbroken and points to a file.","name":"fileExists","id":"fileExists1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"file","id":"file","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns whether [link] exists on the file system. This will return `true`\nfor any symlink, regardless of what it points at or whether it's broken.","name":"linkExists","id":"linkExists1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"link","id":"link","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Determines if a file or directory exists at [path].","name":"entryExists","id":"entryExists1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"31","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns whether or not [entry] is nested somewhere within [dir]. This just\nperforms a path comparison; it doesn't look at the actual filesystem.","name":"isBeneath","id":"isBeneath2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"entry","id":"entry","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"dir","id":"dir","kind":"param"}],"line":"25","kind":"method"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Stream"},"isFinal":true,"comment":"A line-by-line stream of standard input.","name":"stdinLines","id":"stdinLines","line":"273","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Contains the results of invoking a [Process] and waiting for it to complete.","name":"PubProcessResult","id":"PubProcessResult","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"success","id":"success","line":"697","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"name":"stdout","id":"stdout","line":"691","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"name":"stderr","id":"stderr","line":"692","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"exitCode","id":"exitCode","line":"693","kind":"variable"},{"name":"PubProcessResult","id":"PubProcessResult3()","children":[{"initializedField":{"refId":"io/PubProcessResult/stdout","name":"stdout"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"stdout","id":"stdout","kind":"param"},{"initializedField":{"refId":"io/PubProcessResult/stderr","name":"stderr"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"stderr","id":"stderr","kind":"param"},{"initializedField":{"refId":"io/PubProcessResult/exitCode","name":"exitCode"},"ref":{"refId":"dart.core/int","name":"int"},"name":"exitCode","id":"exitCode","kind":"param"}],"line":"695","kind":"constructor"}],"line":"690","kind":"class"},{"interfaces":[{"refId":"dart.core/Exception","name":"Exception"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"Exception thrown when an operation times out.","name":"TimeoutException","id":"TimeoutException","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"686","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"message","id":"message","line":"682","kind":"variable"},{"name":"TimeoutException","id":"TimeoutException1()","children":[{"initializedField":{"refId":"io/TimeoutException/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"684","kind":"constructor"}],"line":"681","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A wrapper around [Process] that exposes `dart:async`-style APIs.","name":"PubProcess","id":"PubProcess","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Sends [signal] to the underlying process.","name":"kill","id":"kill1()","children":[{"ref":{"refId":"dart.io/ProcessSignal","name":"ProcessSignal"},"isOptional":true,"defaultValue":"ProcessSignal.SIGTERM","name":"signal","id":"signal","kind":"param"}],"line":"449","kind":"method"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"EventSink"},"comment":"The sink used for passing data to the process's standard input stream.\nErrors on this stream are surfaced through [stdinClosed], [stdout],\n[stderr], and [exitCode], which are all members of an [ErrorGroup].","name":"stdin","id":"stdin","line":"393","kind":"property"},{"ref":{"refId":"dart.async/Future","name":"Future"},"comment":"A [Future] that completes when [stdin] is closed, either by the user or by\nthe process itself.\n\nThis is in an [ErrorGroup] with [stdout], [stderr], and [exitCode], so any\nerror in process will be passed to it, but won't reach the top-level error\nhandler unless nothing has handled it.","name":"stdinClosed","id":"stdinClosed","line":"405","kind":"property"},{"ref":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"comment":"The process's standard output stream.\n\nThis is in an [ErrorGroup] with [stdinClosed], [stderr], and [exitCode],\nso any error in process will be passed to it, but won't reach the\ntop-level error handler unless nothing has handled it.","name":"stdout","id":"stdout","line":"412","kind":"property"},{"ref":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"comment":"The process's standard error stream.\n\nThis is in an [ErrorGroup] with [stdinClosed], [stdout], and [exitCode],\nso any error in process will be passed to it, but won't reach the\ntop-level error handler unless nothing has handled it.","name":"stderr","id":"stderr","line":"419","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"comment":"A [Future] that will complete to the process's exit code once the process\nhas finished running.\n\nThis is in an [ErrorGroup] with [stdinClosed], [stdout], and [stderr], so\nany error in process will be passed to it, but won't reach the top-level\nerror handler unless nothing has handled it.","name":"exitCode","id":"exitCode","line":"427","kind":"property"},{"ref":{"refId":"dart.io/Process","name":"Process"},"isFinal":true,"comment":"The underlying `dart:io` [Process].","name":"_process","isPrivate":true,"id":"_process","line":"373","kind":"variable"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"EventSink"},"comment":"The mutable field for [stdin].","name":"_stdin","isPrivate":true,"id":"_stdin","line":"376","kind":"variable"},{"ref":{"refId":"dart.async/Future","name":"Future"},"comment":"The mutable field for [stdinClosed].","name":"_stdinClosed","isPrivate":true,"id":"_stdinClosed","line":"379","kind":"variable"},{"ref":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"comment":"The mutable field for [stdout].","name":"_stdout","isPrivate":true,"id":"_stdout","line":"382","kind":"variable"},{"ref":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"comment":"The mutable field for [stderr].","name":"_stderr","isPrivate":true,"id":"_stderr","line":"385","kind":"variable"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"comment":"The mutable field for [exitCode].","name":"_exitCode","isPrivate":true,"id":"_exitCode","line":"388","kind":"variable"},{"comment":"Creates a new [PubProcess] wrapping [process].","name":"PubProcess","id":"PubProcess1()","children":[{"ref":{"refId":"dart.io/Process","name":"Process"},"name":"process","id":"process","kind":"param"}],"line":"430","kind":"constructor"}],"line":"371","kind":"class"}],"line":"6","kind":"library"}