{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"package:oauth2/src/authorization_code_grant.dart","name":"package:oauth2/src/authorization_code_grant.dart","id":"authorization_code_grant","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A class for obtaining credentials via an [authorization code grant][]. This\nmethod of authorization involves sending the resource owner to the\nauthorization server where they will authorize the client. They're then\nredirected back to your server, along with an authorization code. This is\nused to obtain [Credentials] and create a fully-authorized [Client].\n\nTo use this class, you must first call [getAuthorizationUrl] to get the URL\nto which to redirect the resource owner. Then once they've been redirected\nback to your application, call [handleAuthorizationResponse] or\n[handleAuthorizationCode] to process the authorization server's response and\nconstruct a [Client].\n\n[authorization code grant]: http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.1","name":"AuthorizationCodeGrant","id":"AuthorizationCodeGrant","children":[{"returnType":{"refId":"dart.uri/Uri","name":"Uri"},"comment":"Returns the URL to which the resource owner should be redirected to\nauthorize this client. The resource owner will then be redirected to\n[redirect], which should point to a server controlled by the client. This\nredirect will have additional query parameters that should be passed to\n[handleAuthorizationResponse].\n\nThe specific permissions being requested from the authorization server may\nbe specified via [scopes]. The scope strings are specific to the\nauthorization server and may be found in its documentation. Note that you\nmay not be granted access to every scope you request; you may check the\n[Credentials.scopes] field of [Client.credentials] to see which scopes you\nwere granted.\n\nAn opaque [state] string may also be passed that will be present in the\nquery parameters provided to the redirect URL.\n\nIt is a [StateError] to call this more than once.","name":"getAuthorizationUrl","id":"getAuthorizationUrl3()","children":[{"ref":{"refId":"dart.uri/Uri","name":"Uri"},"name":"redirect","id":"redirect","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"defaultValue":"const<String>[] ","name":"scopes","id":"scopes","line":"125","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"state","id":"state","line":"125","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"oauth2_client/Client","name":"Client"}],"name":"Future"},"comment":"Processes the query parameters added to a redirect from the authorization\nserver. Note that this \"response\" is not an HTTP response, but rather the\ndata passed to a server controlled by the client as query parameters on\nthe redirect URL.\n\nIt is a [StateError] to call this more than once, to call it before\n[getAuthorizationUrl] is called, or to call it after\n[handleAuthorizationCode] is called.\n\nThrows [FormatError] if [parameters] is invalid according to the OAuth2\nspec or if the authorization server otherwise provides invalid responses.\nIf `state` was passed to [getAuthorizationUrl], this will throw a\n[FormatError] if the `state` parameter doesn't match the original value.\n\nThrows [AuthorizationException] if the authorization fails.","name":"handleAuthorizationResponse","id":"handleAuthorizationResponse1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"parameters","id":"parameters","kind":"param"}],"line":"161","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"oauth2_client/Client","name":"Client"}],"name":"Future"},"comment":"Processes an authorization code directly. Usually\n[handleAuthorizationResponse] is preferable to this method, since it\nvalidates all of the query parameters. However, some authorization servers\nallow the user to copy and paste an authorization code into a command-line\napplication, in which case this method must be used.\n\nIt is a [StateError] to call this more than once, to call it before\n[getAuthorizationUrl] is called, or to call it after\n[handleAuthorizationCode] is called.\n\nThrows [FormatError] if the authorization server provides invalid\nresponses while retrieving credentials.\n\nThrows [AuthorizationException] if the authorization fails.","name":"handleAuthorizationCode","id":"handleAuthorizationCode1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"authorizationCode","id":"authorizationCode","kind":"param"}],"line":"213","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"oauth2_client/Client","name":"Client"}],"name":"Future"},"comment":"This works just like [handleAuthorizationCode], except it doesn't validate\nthe state beforehand.","name":"_handleAuthorizationCode","isPrivate":true,"id":"_handleAuthorizationCode1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"authorizationCode","id":"authorizationCode","kind":"param"}],"line":"230","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Closes the grant and frees its resources.\n\nThis will close the underlying HTTP client, which is shared by the\n[Client] created by this grant, so it's not safe to close the grant and\ncontinue using the client.","name":"close","id":"close0()","line":"254","kind":"method"},{"isStatic":true,"comment":"An enum value for [_state] indicating that [getAuthorizationUrl] has not\nyet been called for this grant.","name":"_INITIAL_STATE","isPrivate":true,"id":"_INITIAL_STATE","line":"33","kind":"variable"},{"isStatic":true,"name":"_AWAITING_RESPONSE_STATE","isPrivate":true,"id":"_AWAITING_RESPONSE_STATE","line":"38","kind":"variable"},{"isStatic":true,"name":"_FINISHED_STATE","isPrivate":true,"id":"_FINISHED_STATE","line":"43","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The client identifier for this client. The authorization server will issue\neach client a separate client identifier and secret, which allows the\nserver to tell which client is accessing it. Some servers may also have an\nanonymous identifier/secret pair that any client may use.\n\nThis is usually global to the program using this library.","name":"identifier","id":"identifier","line":"51","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The client secret for this client. The authorization server will issue\neach client a separate client identifier and secret, which allows the\nserver to tell which client is accessing it. Some servers may also have an\nanonymous identifier/secret pair that any client may use.\n\nThis is usually global to the program using this library.\n\nNote that clients whose source code or binary executable is readily\navailable may not be able to make sure the client secret is kept a secret.\nThis is fine; OAuth2 servers generally won't rely on knowing with\ncertainty that a client is who it claims to be.","name":"secret","id":"secret","line":"64","kind":"variable"},{"ref":{"refId":"dart.uri/Uri","name":"Uri"},"isFinal":true,"comment":"A URL provided by the authorization server that serves as the base for the\nURL that the resource owner will be redirected to to authorize this\nclient. This will usually be listed in the authorization server's\nOAuth2 API documentation.","name":"authorizationEndpoint","id":"authorizationEndpoint","line":"70","kind":"variable"},{"ref":{"refId":"dart.uri/Uri","name":"Uri"},"isFinal":true,"comment":"A URL provided by the authorization server that this library uses to\nobtain long-lasting credentials. This will usually be listed in the\nauthorization server's OAuth2 API documentation.","name":"tokenEndpoint","id":"tokenEndpoint","line":"75","kind":"variable"},{"ref":{"refId":"client/Client","name":"Client"},"comment":"The HTTP client used to make HTTP requests.","name":"_httpClient","isPrivate":true,"id":"_httpClient","line":"78","kind":"variable"},{"ref":{"refId":"dart.uri/Uri","name":"Uri"},"comment":"The URL to which the resource owner will be redirected after they\nauthorize this client with the authorization server.","name":"_redirectEndpoint","isPrivate":true,"id":"_redirectEndpoint","line":"82","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"The scopes that the client is requesting access to.","name":"_scopes","isPrivate":true,"id":"_scopes","line":"85","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"An opaque string that users of this library may specify that will be\nincluded in the response query parameters.","name":"_stateString","isPrivate":true,"id":"_stateString","line":"89","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The current state of the grant object. One of [_INITIAL_STATE],\n[_AWAITING_RESPONSE_STATE], or [_FINISHED_STATE].","name":"_state","isPrivate":true,"id":"_state","line":"93","kind":"variable"},{"comment":"Creates a new grant.\n\n[httpClient] is used for all HTTP requests made by this grant, as well as\nthose of the [Client] is constructs.","name":"AuthorizationCodeGrant","id":"AuthorizationCodeGrant5()","children":[{"initializedField":{"refId":"authorization_code_grant/AuthorizationCodeGrant/identifier","name":"identifier"},"ref":{"refId":"dart.core/String","name":"String"},"name":"identifier","id":"identifier","line":"100","kind":"param"},{"initializedField":{"refId":"authorization_code_grant/AuthorizationCodeGrant/secret","name":"secret"},"ref":{"refId":"dart.core/String","name":"String"},"name":"secret","id":"secret","line":"101","kind":"param"},{"initializedField":{"refId":"authorization_code_grant/AuthorizationCodeGrant/authorizationEndpoint","name":"authorizationEndpoint"},"ref":{"refId":"dart.uri/Uri","name":"Uri"},"name":"authorizationEndpoint","id":"authorizationEndpoint","line":"102","kind":"param"},{"initializedField":{"refId":"authorization_code_grant/AuthorizationCodeGrant/tokenEndpoint","name":"tokenEndpoint"},"ref":{"refId":"dart.uri/Uri","name":"Uri"},"name":"tokenEndpoint","id":"tokenEndpoint","line":"103","kind":"param"},{"isNamed":true,"ref":{"refId":"client/Client","name":"Client"},"isOptional":true,"name":"httpClient","id":"httpClient","line":"104","kind":"param"}],"line":"99","kind":"constructor"}],"line":"30","kind":"class"}],"line":"5","kind":"library"}